name: Build and Release Mod

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest
    steps:
      # 1) Checkout your code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2) Install .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0.x'
          
      # 3) Install SteamCMD on the runner
      - name: Install SteamCMD
        uses: Lordfirespeed/setup-steamcmd@v2

      # 4) Use SteamCMD to install Stardew Valley
      - name: Install Stardew Valley via SteamCMD
        run: |
          # steamcmd must be on PATH from the previous step
          steamcmd +login anonymous \
                   +force_install_dir "${{ runner.temp }}\Stardew" \
                   +app_update 413150 validate \
                   +quit

      # 5) Download and unpack the SMAPI installer
      - name: Download SMAPI installer
        run: |
          Invoke-WebRequest `
            -Uri "https://github.com/Pathoschild/SMAPI/releases/download/4.2.1/SMAPI-4.2.1-installer.zip" `
            -OutFile "smapi.zip"
          Expand-Archive smapi.zip -DestinationPath smapi
          
      # 6) Run SMAPIâ€™s Windows installer silently into the same folder
      - name: Install SMAPI into game folder
        shell: pwsh
        run: |
          # NSIS silent flag is /S, and /D= must be the last argument
          & .\smapi\SMAPI-4.2.1-installer.exe /S /D="${{ runner.temp }}\Stardew"

      # 7) Restore & build, pointing ModBuildConfig at our freshly-installed game
      - name: Build & zip
        shell: pwsh
        run: |
          dotnet clean
          dotnet build `
            --configuration Release `
            -p:GamePath="C:\Program Files\Steam\steamapps\common\Stardew Valley"

      # 8) Copy your manifest, DLL, README, LICENSE and zip them
      - name: Package mod ZIP
        shell: pwsh
        run: |
          $modName   = 'AlonsMOTD'
          $outDir    = "$env:GITHUB_WORKSPACE\bin\Release\net7.0"
          $zipPath   = "$env:GITHUB_WORKSPACE\${modName}.zip"
          
          # Make sure the output dir exists and copy in only what you ship
          New-Item -ItemType Directory -Path $outDir -Force
          Copy-Item -Path `
            'AlonsMOTD.dll','manifest.json','README.md','LICENSE.txt' `
            -Destination $outDir -Force
          
          Compress-Archive -Path "$outDir\*" -DestinationPath $zipPath -Force

      # 9) Publish your DLL + ZIP as GitHub Release assets
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            bin/Release/net7.0/AlonsMOTD.dll
            AlonsMOTD.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
