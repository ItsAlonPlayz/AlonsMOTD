name: Build and Release Mod

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest

    steps:
      # 1) Get your code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2) Install .NET 7 SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0.x'

      # 3) Restore NuGet packages
      - name: Restore dependencies
        run: dotnet restore

      # 4) Install SteamCMD on runner
      - name: Install SteamCMD
        uses: Lordfirespeed/setup-steamcmd@v2

      # 5) Download Stardew via SteamCMD (Option A: single-line)
      - name: Install Stardew Valley via SteamCMD
        shell: pwsh
        run: steamcmd +login anonymous +force_install_dir "${{ runner.temp }}\Stardew" +app_update 413150 validate +quit

      # 6) Download and unpack SMAPI installer
      - name: Download SMAPI installer
        shell: pwsh
        run: |
          Invoke-WebRequest `
            -Uri "https://github.com/Pathoschild/SMAPI/releases/download/4.2.1/SMAPI-4.2.1-installer.zip" `
            -OutFile "smapi.zip"
          Expand-Archive smapi.zip -DestinationPath smapi

      # 7) Install SMAPI silently into the same game folder
      - name: Install SMAPI into game folder
        shell: pwsh
        run: |
          & .\smapi\SMAPI-4.2.1-installer.exe /S /D="${{ runner.temp }}\Stardew"

      # 8) Build your mod, pointing at the installed game
      - name: Build & zip
        shell: pwsh
        run: |
          dotnet clean
          dotnet build `
            --configuration Release `
            -p:GamePath="${{ runner.temp }}\Stardew"

      # 9) Copy manifest, DLL & docs into bin dir and zip
      - name: Package mod ZIP
        shell: pwsh
        run: |
          $modName = 'AlonsMOTD'
          $outDir  = "$env:GITHUB_WORKSPACE\bin\Release\net7.0"
          $zipPath = "$env:GITHUB_WORKSPACE\${modName}.zip"

          New-Item -ItemType Directory -Path $outDir -Force
          Copy-Item -Path 'AlonsMOTD.dll','manifest.json','README.md','LICENSE.txt' -Destination $outDir -Force
          Compress-Archive -Path "$outDir\*" -DestinationPath $zipPath -Force

      # 10) Attach the DLL & ZIP to your GitHub Release
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            bin/Release/net7.0/AlonsMOTD.dll
            AlonsMOTD.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
